[workspace]
resolver = "2"
members = [
    "boomer",
    "dradis",
    "dradis-frame-check",
    "dradis-threads-pool",
    "facet-enum-repr",
    "facet-enum-repr-derive",
    "linux-mc",
    "linux-raw",
    "linux-uevent",
    "v4l2-raw",
    "v4lise",
]

[profile.release]
codegen-units = 1
lto = "fat"
opt-level = 3
panic = "abort"

[workspace.package]
authors = ["Maxime Ripard <mripard@kernel.org>"]
edition = "2021"
license-file = "./LICENSE"
repository = "https://github.com/mripard/dradis.git"
version = "0.5.2"

[workspace.dependencies]
anyhow = { version = "1.0.100", default-features = false }
bindgen = { version = "0.72.1", default-features = false }
bitflags = { version = "2.9.3", default-features = false }
built = { version = "0.8.0", default-features = false, features = ["git2"] }
bytemuck = { version = "1.23.2", default-features = false }
clap = { version = "4.5.46", default-features = false, features = [
    "cargo",
    "derive",
    "help",
    "std",
] }
criterion = { version = "0.6.0", default-features = false, features = [
    "cargo_bench_support",
    "plotters",
] }
dma-buf = { version = "0.5.0", default-features = false }
dma-heap = { version = "0.4.1", default-features = false }
facet = { version = "0.28.1", default-features = false }
facet-enum-repr = { path = "./facet-enum-repr" }
facet-enum-repr-derive = { path = "./facet-enum-repr-derive" }
facet-macros-parse = { version = "0.28.0", default-features = false }
facet-reflect = { version = "0.28.1", default-features = false }
frame_check = { package = "dradis-frame-check", path = "./dradis-frame-check" }
image = { version = "0.25.7", default-features = false, features = ["png"] }
linux-mc = { path = "./linux-mc" }
linux-raw = { path = "./linux-raw" }
linux-uevent = { path = "./linux-uevent" }
neli = { version = "0.7.1", default-features = false }
nucleid = { git = "https://github.com/mripard/nucleid.git", rev = "a4e42fd73d992c2b24aef5bee378141ac6dfa13b" }
num-traits = { version = "0.2.19", default-features = false }
pix = { version = "0.14.0", default-features = false }
png = { version = "0.18.0", default-features = false }
qrcode = { version = "0.14.1", default-features = false, features = ["image"] }
redid = { git = "https://github.com/mripard/redid.git" }
rxing = { version = "0.7.1", default-features = false }
rustix = { version = "1.0.8", default-features = false, features = [
    "fs",
    "param",
    "std",
    "system",
    "time",
] }
rstest = { version = "0.25.0", default-features = false }
serde = { version = "1.0.228", default-features = false, features = ["derive"] }
serde_json = { version = "1.0.143", default-features = false, features = [
    "std",
] }
serde_with = { version = "3.14.0", default-features = false, features = [
    "macros",
    "std",
] }
serde_yaml = { version = "0.9.34", default-features = false }
test-log = { version = "0.2.16", default-features = false, features = ["trace"] }
thiserror = { version = "2.0.17", default-features = false }
threads_pool = { package = "dradis-threads-pool", path = "./dradis-threads-pool" }
tracelimit = { git = "https://github.com/microsoft/openvmm.git", default-features = false }
tracing = { version = "0.1.41", default-features = false, features = [
    "attributes",
] }
tracing-subscriber = { version = "0.3.20", default-features = false, features = [
    "ansi",
    "env-filter",
    "fmt",
    "std",
] }
twox-hash = { version = "2.1.0", default-features = false, features = [
    "xxhash64",
] }
unsynn = { version = "0.1.1", default-features = false }
v4l2-raw = { path = "./v4l2-raw" }
v4lise = { path = "./v4lise" }

[workspace.lints.rust]
# Groups
future_incompatible = { level = "warn", priority = -1 }
keyword_idents = { level = "warn", priority = -1 }
nonstandard_style = { level = "warn", priority = -1 }
rust_2018_idioms = { level = "warn", priority = -1 }

# Individual Lints
absolute_paths_not_starting_with_crate = "warn"
let_underscore_drop = "warn"
macro_use_extern_crate = "warn"
missing_abi = "deny"
missing_debug_implementations = "warn"
missing_docs = "warn"
non_ascii_idents = "warn"
rust_2021_incompatible_closure_captures = "deny"
rust_2021_incompatible_or_patterns = "deny"
rust_2021_prefixes_incompatible_syntax = "warn"
rust_2021_prelude_collisions = "warn"
single_use_lifetimes = "warn"
trivial_casts = "warn"
trivial_numeric_casts = "warn"
unreachable_pub = "warn"
unsafe_code = "deny"
unsafe_op_in_unsafe_fn = "warn"
unused_crate_dependencies = "warn"
unused_import_braces = "warn"
unused_lifetimes = "warn"
unused_macro_rules = "warn"
unused_qualifications = "warn"
variant_size_differences = "warn"

[workspace.lints.clippy]
# Groups
all = { level = "deny", priority = -1 }
cargo = { level = "warn", priority = -1 }
complexity = { level = "warn", priority = -1 }
correctness = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
perf = { level = "warn", priority = -1 }
style = { level = "warn", priority = -1 }
suspicious = { level = "warn", priority = -1 }

# Individual Lints
## Allowed Lints
multiple_crate_versions = "allow"

## Restriction Clippy Lints
alloc_instead_of_core = "warn"
as_pointer_underscore = "warn"
assertions_on_result_states = "warn"
dbg_macro = "warn"
decimal_literal_representation = "warn"
empty_enum_variants_with_brackets = "warn"
empty_drop = "warn"
empty_structs_with_brackets = "warn"
error_impl_error = "warn"
exit = "warn"
float_cmp_const = "warn"
fn_to_numeric_cast_any = "warn"
format_push_string = "warn"
get_unwrap = "warn"
infinite_loop = "warn"
let_underscore_must_use = "warn"
let_underscore_untyped = "warn"
literal_string_with_formatting_args = "warn"
lossy_float_literal = "warn"
map_err_ignore = "warn"
mem_forget = "warn"
missing_assert_message = "warn"
missing_asserts_for_indexing = "warn"
mixed_read_write_in_expression = "warn"
mod_module_files = "warn"
modulo_arithmetic = "warn"
multiple_inherent_impl = "warn"
multiple_unsafe_ops_per_block = "warn"
mutex_atomic = "warn"
needless_raw_strings = "warn"
non_ascii_literal = "warn"
non_zero_suggestions = "warn"
panic_in_result_fn = "warn"
partial_pub_fields = "warn"
pathbuf_init_then_push = "warn"
pointer_format = "warn"
print_stdout = "warn"
redundant_type_annotations = "warn"
ref_patterns = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_name_method = "warn"
semicolon_outside_block = "warn"
separated_literal_suffix = "warn"
std_instead_of_alloc = "warn"
std_instead_of_core = "warn"
str_to_string = "warn"
string_add = "warn"
string_to_string = "warn"
suspicious_xor_used_as_pow = "warn"
tests_outside_test_module = "warn"
todo = "warn"
try_err = "warn"
undocumented_unsafe_blocks = "warn"
unnecessary_safety_comment = "warn"
unnecessary_safety_doc = "warn"
unnecessary_self_imports = "warn"
unneeded_field_pattern = "warn"
unused_result_ok = "warn"
unused_trait_names = "warn"
unwrap_in_result = "warn"
unwrap_used = "warn"
use_debug = "warn"
wildcard_enum_match_arm = "warn"

## Other Lints
coerce_container_to_any = "warn"
cognitive_complexity = "warn"
debug_assert_with_mut_call = "warn"
fallible_impl_from = "warn"
imprecise_flops = "warn"
mutex_integer = "warn"
path_buf_push_overwrite = "warn"
string_lit_as_bytes = "warn"
trait_duplication_in_bounds = "warn"
verbose_file_reads = "warn"
